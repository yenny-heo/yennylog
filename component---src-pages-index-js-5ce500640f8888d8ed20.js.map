{"version":3,"file":"component---src-pages-index-js-5ce500640f8888d8ed20.js","mappings":"uLASA,EAHe,CACbA,M,KALYC,QAAAA,IAAAA,WAAH,6DAAGA,CAAH,6B,UCALC,EAAiB,SAAAC,GACrB,OAAOA,EAAKC,KAAI,SAAAC,GAAI,wBAAUA,EAAV,CAAgBC,QAAQ,QAiB9C,EAdkB,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACnB,GAAwBC,EAAAA,EAAAA,UACtBN,EAAeK,GAAOE,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAEC,WAAaF,EAAEE,eADjDT,EAAP,KAAaU,EAAb,KAGA,GAAoCL,EAAAA,EAAAA,UAAS,GAAtCM,EAAP,KAAmBC,EAAnB,KAQA,MAAO,CAAEZ,KAAAA,EAAMa,YANK,SAAAC,GAClB,IAAIC,EAAUhB,GAAe,OAAIC,IACjCU,EAAQK,GACRH,EAAcE,IAGYH,WAAAA,IC0C9B,EApDkB,SAAC,GAAc,IAC/B,EAD8B,EAAXK,KACuBC,kBAAtBC,GAApB,EAAQT,WAAR,EAAoBS,OAAOd,EAA3B,EAA2BA,MAC3B,EAA0Ce,EAAU,CAAEf,MAAAA,IAA9CJ,EAAR,EAAQA,KAAMa,EAAd,EAAcA,YAAaF,EAA3B,EAA2BA,WAC3B,GAAwCN,EAAAA,EAAAA,UAAS,IAA1Ce,EAAP,KAAqBC,EAArB,KAOA,OANAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAWL,EAAMM,QACrB,SAAAC,GAAI,aAAIA,EAAKC,KAAKC,YAAYC,QAAtB,UAA+B5B,EAAKW,UAApC,aAA+B,EAAkBkB,QAE3DR,EAAgBE,KACf,CAACZ,IAEF,gBAAC,KAAD,KACE,gBAAC,IAAD,CAAKmB,MAAM,SACX,gBAAC,QAAD,KACE,gBAAC,KAAD,CAAM9B,KAAMA,EAAMa,YAAaA,EAAaF,WAAYA,IACvDS,EAAanB,KAAI,gBAAGyB,EAAH,EAAGA,KAAH,OAChB,gBAAC,KAAD,CAAUK,IAAKL,EAAKM,GAAIN,KAAMA","sources":["webpack://yennylog/./src/styledComponents/index.styled.js","webpack://yennylog/./src/hooks/tabs.hooks.js","webpack://yennylog/./src/pages/index.js"],"sourcesContent":["import styled from \"styled-components\";\r\n\r\nconst Posts = styled.div`\r\n  justify-content: start;\r\n`;\r\n\r\nconst Styled = {\r\n  Posts,\r\n};\r\nexport default Styled;\r\n","import { useState, useEffect } from \"react\";\r\n\r\nconst initializeTabs = tabs => {\r\n  return tabs.map(item => ({ ...item, active: false }));\r\n};\r\n\r\nconst TabsHooks = ({ group }) => {\r\n  const [tabs, setTabs] = useState(\r\n    initializeTabs(group).sort((a, b) => b.totalCount - a.totalCount)\r\n  );\r\n  const [currentTab, setCurrentTab] = useState(0);\r\n\r\n  const onChangeTab = index => {\r\n    let newTabs = initializeTabs([...tabs]);\r\n    setTabs(newTabs);\r\n    setCurrentTab(index);\r\n  };\r\n\r\n  return { tabs, onChangeTab, currentTab };\r\n};\r\nexport default TabsHooks;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { graphql } from \"gatsby\";\r\n\r\nimport { Layout, PostCard, Tabs } from \"@/components\";\r\nimport Seo from \"@/components/seo\";\r\nimport Styled from \"@/styledComponents/index.styled\";\r\nimport TabsHooks from \"@/hooks/tabs.hooks\";\r\n\r\nconst IndexPage = ({ data }) => {\r\n  const { totalCount, edges, group } = data.allMarkdownRemark;\r\n  const { tabs, onChangeTab, currentTab } = TabsHooks({ group });\r\n  const [currentEdges, setCurrentEdges] = useState([]);\r\n  useEffect(() => {\r\n    const newEdges = edges.filter(\r\n      edge => edge.node.frontmatter.type === tabs[currentTab]?.tag\r\n    );\r\n    setCurrentEdges(newEdges);\r\n  }, [currentTab]);\r\n  return (\r\n    <Layout>\r\n      <Seo title=\"Home\" />\r\n      <Styled.Posts>\r\n        <Tabs tabs={tabs} onChangeTab={onChangeTab} currentTab={currentTab} />\r\n        {currentEdges.map(({ node }) => (\r\n          <PostCard key={node.id} node={node} />\r\n        ))}\r\n      </Styled.Posts>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport const query = graphql`\r\n  query {\r\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\r\n      totalCount\r\n      edges {\r\n        node {\r\n          id\r\n          frontmatter {\r\n            title\r\n            date(formatString: \"DD MMM YYYY\")\r\n            description\r\n            tags\r\n            type\r\n          }\r\n          fields {\r\n            slug\r\n          }\r\n          excerpt\r\n          tableOfContents\r\n        }\r\n      }\r\n      group(field: frontmatter___type) {\r\n        tag: fieldValue\r\n        totalCount\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default IndexPage;\r\n"],"names":["Posts","styled","initializeTabs","tabs","map","item","active","group","useState","sort","a","b","totalCount","setTabs","currentTab","setCurrentTab","onChangeTab","index","newTabs","data","allMarkdownRemark","edges","TabsHooks","currentEdges","setCurrentEdges","useEffect","newEdges","filter","edge","node","frontmatter","type","tag","title","key","id"],"sourceRoot":""}