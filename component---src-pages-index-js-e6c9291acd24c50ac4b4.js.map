{"version":3,"file":"component---src-pages-index-js-e6c9291acd24c50ac4b4.js","mappings":"2MAGMA,G,KCDQC,QAAAA,IAAAA,WAAH,6DAAGA,CAAH,4BDCY,SAAAC,GACrB,OAAOA,EAAKC,KAAI,SAAAC,GAAI,wBAAUA,EAAV,CAAgBC,QAAQ,SAkB9C,EAfkB,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACnB,GAAwBC,EAAAA,EAAAA,UACtBP,EAAeM,GAAOE,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAEC,WAAaF,EAAEE,eADjDT,EAAP,KAAaU,EAAb,KAGA,GAAoCL,EAAAA,EAAAA,UAAS,GAAtCM,EAAP,KAAmBC,EAAnB,KASA,MAAO,CAAEZ,KAAAA,EAAMa,YAPK,SAAAC,GAClB,IAAIC,EAAUjB,GAAe,OAAIE,IACjCU,EAAQK,GACRH,EAAcE,IACdE,EAAAA,EAAAA,UAAS,MAGiBL,WAAAA,I,UEsE9B,ECvFqB,SAAAM,GAAS,OAAI,SAAAC,GAAK,OAEnC,gBAAC,EAAAC,SAAD,MACG,gBAAGC,EAAH,EAAGA,SAAH,OAAkB,gBAACH,EAAD,eAAWG,SAAUA,GAAcF,QDoF5D,EAjFkB,SAAC,GAAwB,IAAtBG,EAAqB,EAArBA,KAAMD,EAAe,EAAfA,SACzB,EAAqCC,EAAKC,kBAAtBC,GAApB,EAAQd,WAAR,EAAoBc,OAAOnB,EAA3B,EAA2BA,MAC3B,EAA0CoB,EAAU,CAAEpB,MAAAA,IAA9CJ,EAAR,EAAQA,KAAMa,EAAd,EAAcA,YAAaF,EAA3B,EAA2BA,WAC3B,GAAwCN,EAAAA,EAAAA,UAAS,IAA1CoB,EAAP,KAAqBC,EAArB,KACA,GAA8BrB,EAAAA,EAAAA,UAAS,IAAhCsB,EAAP,KAAgBC,EAAhB,KACA,GAAoCvB,EAAAA,EAAAA,UAAS,IAAtCwB,EAAP,KAAmBC,EAAnB,MAEAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,IAAIC,gBAAgBb,EAASc,QAC5CJ,EAAcE,EAAOG,IAAI,UACxB,CAACf,EAASc,UAEbH,EAAAA,EAAAA,YAAU,WACR,IAAMK,EAAU,GAKVC,EAJgBd,EAAMe,QAAO,SAAAC,GAAS,IAAD,EAEzC,OADiBA,EAAKC,KAAKC,YAAnBC,QACG,UAAK1C,EAAKW,UAAV,aAAK,EAAkBgC,QAEAL,QAAO,SAAAC,GACzC,IAAQK,EAASL,EAAKC,KAAKC,YAAnBG,KAER,OADAR,EAAQS,KAAR,MAAAT,GAAO,OAASQ,KACRf,GAAce,EAAKE,SAASjB,MAEhCkB,GAAU,OAAO,IAAIC,IAAIZ,IACzBT,EAAU,GAChBoB,EAAWE,SAAQ,SAAAC,GACjB,IAAMC,EAAWf,EAAQE,QAAO,SAAAc,GAAM,OAAIF,IAAYE,KAAQC,OAC9D1B,EAAQkB,KAAK,CACXS,KAAMJ,EACNK,MAAOJ,OAIXzB,EAAgBW,GAChBT,EAAWD,KACV,CAAChB,EAAYkB,IAMhB,OACE,gBAAC,KAAD,CAAQ2B,SAAU,CAAE7B,QAAAA,EAASE,WAAAA,EAAY4B,WALxB,SAAAd,IACjB3B,EAAAA,EAAAA,UAAS,SAAS0C,mBAAmBf,OAKnC,gBAAC,IAAD,CAAKgB,MAAM,SACX,gBAAC,KAAD,CAAM3D,KAAMA,EAAMa,YAAaA,EAAaF,WAAYA,IACvDc,EAAaxB,KAAI,gBAAGuC,EAAH,EAAGA,KAAH,OAChB,gBAAC,KAAD,CAAUoB,IAAKpB,EAAKqB,GAAIrB,KAAMA","sources":["webpack://yennylog/./src/hooks/tabs.hooks.js","webpack://yennylog/./src/styledComponents/index.styled.js","webpack://yennylog/./src/pages/index.js","webpack://yennylog/./src/hoc/withLocation.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { navigate } from \"gatsby\";\r\n\r\nconst initializeTabs = tabs => {\r\n  return tabs.map(item => ({ ...item, active: false }));\r\n};\r\n\r\nconst TabsHooks = ({ group }) => {\r\n  const [tabs, setTabs] = useState(\r\n    initializeTabs(group).sort((a, b) => b.totalCount - a.totalCount)\r\n  );\r\n  const [currentTab, setCurrentTab] = useState(0);\r\n\r\n  const onChangeTab = index => {\r\n    let newTabs = initializeTabs([...tabs]);\r\n    setTabs(newTabs);\r\n    setCurrentTab(index);\r\n    navigate(\"/\");\r\n  };\r\n\r\n  return { tabs, onChangeTab, currentTab };\r\n};\r\nexport default TabsHooks;\r\n","import styled from \"styled-components\";\r\n\r\nconst Posts = styled.div`\r\n  justify-content: start;\r\n`;\r\n\r\nconst Styled = {\r\n  Posts,\r\n};\r\nexport default Styled;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { graphql, navigate } from \"gatsby\";\r\n\r\nimport { Layout, PostCard, Tabs } from \"@/components\";\r\nimport Seo from \"@/components/seo\";\r\nimport Styled from \"@/styledComponents/index.styled\";\r\nimport TabsHooks from \"@/hooks/tabs.hooks\";\r\nimport withLocation from \"@/hoc/withLocation\";\r\n\r\nconst IndexPage = ({ data, location }) => {\r\n  const { totalCount, edges, group } = data.allMarkdownRemark;\r\n  const { tabs, onChangeTab, currentTab } = TabsHooks({ group });\r\n  const [currentEdges, setCurrentEdges] = useState([]);\r\n  const [tagObjs, setTagObjs] = useState([]);\r\n  const [currentTag, setCurrentTag] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    const params = new URLSearchParams(location.search);\r\n    setCurrentTag(params.get(\"tag\"));\r\n  }, [location.search]);\r\n\r\n  useEffect(() => {\r\n    const newTags = [];\r\n    const filteredByTab = edges.filter(edge => {\r\n      const { type } = edge.node.frontmatter;\r\n      return type === tabs[currentTab]?.tag;\r\n    });\r\n    const filteredByTag = filteredByTab.filter(edge => {\r\n      const { tags } = edge.node.frontmatter;\r\n      newTags.push(...tags);\r\n      return !currentTag || tags.includes(currentTag);\r\n    });\r\n    const tagNameSet = [...new Set(newTags)];\r\n    const tagObjs = [];\r\n    tagNameSet.forEach(tagName => {\r\n      const tagCount = newTags.filter(newTag => tagName === newTag).length;\r\n      tagObjs.push({\r\n        name: tagName,\r\n        count: tagCount,\r\n      });\r\n    });\r\n\r\n    setCurrentEdges(filteredByTag);\r\n    setTagObjs(tagObjs);\r\n  }, [currentTab, currentTag]);\r\n\r\n  const onClickTag = tag => {\r\n    navigate(`/?tag=${encodeURIComponent(tag)}`);\r\n  };\r\n\r\n  return (\r\n    <Layout tagsInfo={{ tagObjs, currentTag, onClickTag }}>\r\n      <Seo title=\"Home\" />\r\n      <Tabs tabs={tabs} onChangeTab={onChangeTab} currentTab={currentTab} />\r\n      {currentEdges.map(({ node }) => (\r\n        <PostCard key={node.id} node={node} />\r\n      ))}\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport const query = graphql`\r\n  query {\r\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\r\n      totalCount\r\n      edges {\r\n        node {\r\n          id\r\n          frontmatter {\r\n            title\r\n            date(formatString: \"DD MMM YYYY\")\r\n            description\r\n            tags\r\n            type\r\n          }\r\n          fields {\r\n            slug\r\n          }\r\n          excerpt\r\n          tableOfContents\r\n        }\r\n      }\r\n      group(field: frontmatter___type) {\r\n        tag: fieldValue\r\n        totalCount\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default withLocation(IndexPage);\r\n","import React from \"react\";\r\nimport { Location } from \"@reach/router\";\r\n\r\nconst withLocation = Component => props =>\r\n  (\r\n    <Location>\r\n      {({ location }) => <Component location={location} {...props} />}\r\n    </Location>\r\n  );\r\n\r\nexport default withLocation;\r\n"],"names":["initializeTabs","styled","tabs","map","item","active","group","useState","sort","a","b","totalCount","setTabs","currentTab","setCurrentTab","onChangeTab","index","newTabs","navigate","Component","props","Location","location","data","allMarkdownRemark","edges","TabsHooks","currentEdges","setCurrentEdges","tagObjs","setTagObjs","currentTag","setCurrentTag","useEffect","params","URLSearchParams","search","get","newTags","filteredByTag","filter","edge","node","frontmatter","type","tag","tags","push","includes","tagNameSet","Set","forEach","tagName","tagCount","newTag","length","name","count","tagsInfo","onClickTag","encodeURIComponent","title","key","id"],"sourceRoot":""}