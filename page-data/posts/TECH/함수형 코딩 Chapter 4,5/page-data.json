{"componentChunkName":"component---src-components-templates-post-index-js","path":"/posts/TECH/함수형 코딩 Chapter 4,5/","result":{"data":{"markdownRemark":{"html":"<h1 id=\"megamartcom\" style=\"position:relative;\"><a href=\"#megamartcom\" aria-label=\"megamartcom permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MegaMart.com</h1>\n<ul>\n<li>장바구니의 금액합계 보여주기</li>\n<li>합계 20달러 이상 무료배송 아이콘 추가</li>\n<li>물건 세금 보여주기</li>\n</ul>\n<h2 id=\"기존-코드\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EC%A1%B4-%EC%BD%94%EB%93%9C\" aria-label=\"기존 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기존 코드</h2>\n<deckgo-highlight-code language=\"jsx\"  >\n          <code slot=\"code\">/********** 장바구니 금액 합계 보여주기 ************/\r\n// 장바구니 제품과 금액 합계를 담고 있는 전역변수\r\nvar shopping_cart = [];\r\nvar shopping_cart_total = 0;\r\n\r\nfunction add_item_to_cart(name, price) {\r\n  // cart 배열에 제품을 추가\r\n  shopping_cart.push({\r\n    name,\r\n    price,\r\n  });\r\n  // 장바구니 제품이 바뀌었으므로 금액 업데이트\r\n  calc_cart_total();\r\n}\r\n\r\nfunction calc_cart_total() {\r\n  shopping_cart_total = 0;\r\n  shopping_cart.forEach((item) =&gt; {\r\n    // 모든 제품값 더하기\r\n    shopping_cart_total += item.price;\r\n  });\r\n  // 금액 합계를 반영하기 위해 DOM 업데이트\r\n  set_cart_total_dom();\r\n  // 무료 배송비 아이콘 여부 계산\r\n  update_shipping_icons();\r\n  // 세금 계산\r\n  update_tax_dom();\r\n}\r\n\r\n/********** 무료 배송비 계산하기 ************/\r\nfunction update_shipping_icons() {\r\n  var buy_buttons = get_buy_buttons_dom();\r\n  // 페이지의 모든 구매 버튼을 가져와 반복문 실행\r\n  buy_buttons.forEach((button) =&gt; {\r\n    var item = button.item;\r\n    // 무료 배송이 가능한지 확인 =&gt; 무배 아이콘 노출/비노출\r\n    if (item.price + shopping_cart_total &gt;= 20)\r\n      button.show_free_shipping_icon();\r\n    else button.hide_free_shipping_icon();\r\n  });\r\n}\r\n\r\n/********** 세금 계산하기 ************/\r\nfunction update_tax_dom() {\r\n  // 세금 합계 DOM 업데이트\r\n  set_tax_dom(shopping_cart_total * 1.0);\r\n}</code>\n        </deckgo-highlight-code>\n<h2 id=\"문제점-위-코드에는-계산-데이터가-없고-모든-코드가-액션이다\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C%EC%A0%90-%EC%9C%84-%EC%BD%94%EB%93%9C%EC%97%90%EB%8A%94-%EA%B3%84%EC%82%B0-%EB%8D%B0%EC%9D%B4%ED%84%B0%EA%B0%80-%EC%97%86%EA%B3%A0-%EB%AA%A8%EB%93%A0-%EC%BD%94%EB%93%9C%EA%B0%80-%EC%95%A1%EC%85%98%EC%9D%B4%EB%8B%A4\" aria-label=\"문제점 위 코드에는 계산 데이터가 없고 모든 코드가 액션이다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제점: 위 코드에는 계산, 데이터가 없고 모든 코드가 액션이다.</h2>\n<ul>\n<li>변경이 가능한 전역변수 정의</li>\n<li>DOM에서 읽어오는 것</li>\n<li>DOM을 바꾸는 것</li>\n<li>전역변수를 바꾸는 것</li>\n<li>함수에 암묵적 입출력이 존재 ⇒ 인자, 리턴값 외 다른 입출력이 존재하면 안됨.\n<ul>\n<li>전역변수를 읽는 것: 압묵적 입력</li>\n<li>전역변수를 바꾸는 것: 압묵적 출력</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"테스트와-재사용성\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%99%80-%EC%9E%AC%EC%82%AC%EC%9A%A9%EC%84%B1\" aria-label=\"테스트와 재사용성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>테스트와 재사용성</h1>\n<ul>\n<li>테스트가 쉽도록 코드를 짜기\n<ul>\n<li>DOM 업데이트와 비즈니스 규칙을 분리</li>\n<li>전역변수가 없어야 함</li>\n</ul>\n</li>\n<li>재사용성 있게 코드를 짜기\n<ul>\n<li>전역변수에 의존하지 않아야 한다.</li>\n<li>DOM을 사용할 수 있는 곳에서 실행된다고 가정하면 안된다.</li>\n<li>함수가 결괏값을 리턴해야 한다.</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"코드-변경하기\" style=\"position:relative;\"><a href=\"#%EC%BD%94%EB%93%9C-%EB%B3%80%EA%B2%BD%ED%95%98%EA%B8%B0\" aria-label=\"코드 변경하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코드 변경하기</h1>\n<p>기존 코드</p>\n<deckgo-highlight-code language=\"jsx\"  >\n          <code slot=\"code\">function calc_cart_total() {\r\n  shopping_cart_total = 0;\r\n  // 1) 액션에 존재하는 계산\r\n  shopping_cart.forEach((item) =&gt; {\r\n    // 2) 압묵적 입력 (전역변수 READ)\r\n    shopping_cart_total += item.price; // 3) 압묵적 출력 (전역변수 UPDATE)\r\n  });\r\n  set_cart_total_dom();\r\n  update_shipping_icons();\r\n  update_tax_dom();\r\n}</code>\n        </deckgo-highlight-code>\n<p>변경한 코드</p>\n<deckgo-highlight-code language=\"jsx\"  >\n          <code slot=\"code\">function calc_cart_total() {\r\n  shopping_cart_total = calc_total(shopping_cart);\r\n  set_cart_total_dom();\r\n  update_shipping_icons();\r\n  update_tax_dom();\r\n}\r\n\r\n// 1) 액션에서 계산 분리하기\r\nfunction calc_total(cart) {\r\n  var total = 0;\r\n  cart.forEach((item) =&gt; {\r\n    // 2) 압묵적 입력 제거\r\n    total += item.price; // 3) 압묵적 출력 제거\r\n  });\r\n  return total;\r\n}</code>\n        </deckgo-highlight-code>\n<p>기존 코드</p>\n<deckgo-highlight-code language=\"jsx\"  >\n          <code slot=\"code\">function add_item_to_cart(name, price) {\r\n  // 1) 액션에 존재하는 계산\r\n  // 2) 압묵적 입력 (전역변수 READ)\r\n  // 3) 압묵적 출력 (전역변수 UPDATE)\r\n  shopping_cart.push({\r\n    name,\r\n    price,\r\n  });\r\n  calc_cart_total();\r\n}</code>\n        </deckgo-highlight-code>\n<p>변경한 코드</p>\n<deckgo-highlight-code language=\"jsx\"  >\n          <code slot=\"code\">function add_item_to_cart(name, price) {\r\n  add_item(shopping_cart, name, price);\r\n  shopping_cart.push({\r\n    name,\r\n    price,\r\n  });\r\n  calc_cart_total();\r\n}\r\n\r\n// 1) 액션에서 계산 분리하기\r\nfunction add_item(cart, name, price) {\r\n  // 2) 압묵적 입력 제거\r\n  var new_cart = [...cart];\r\n  // 3) 압묵적 출력 제거\r\n  new_cart.push({\r\n    name,\r\n    price,\r\n  });\r\n  return new_cart;\r\n}</code>\n        </deckgo-highlight-code>\n<p>기존 코드</p>\n<deckgo-highlight-code language=\"jsx\"  >\n          <code slot=\"code\">function update_shipping_icons() {\r\n  var buy_buttons = get_buy_buttons_dom();\r\n  buy_buttons.forEach((button) =&gt; {\r\n    var item = button.item;\r\n    // 1) 액션에 존재하는 계산\r\n    // 2) 압묵적 입력 (전역변수 READ)\r\n    if (item.price + shopping_cart_total &gt;= 20)\r\n      button.show_free_shipping_icon();\r\n    else button.hide_free_shipping_icon();\r\n  });\r\n}\r\n\r\nfunction update_tax_dom() {\r\n  set_tax_dom(shopping_cart_total * 1.0);\r\n}</code>\n        </deckgo-highlight-code>\n<p>변경한 코드</p>\n<deckgo-highlight-code language=\"jsx\"  >\n          <code slot=\"code\">function update_shipping_icons() {\r\n  var buy_buttons = get_buy_buttons_dom();\r\n  buy_buttons.forEach((button) =&gt; {\r\n    var item = button.item;\r\n    if (gets_free_shipping(item.price, shopping_cart_total))\r\n      button.show_free_shipping_icon();\r\n    else button.hide_free_shipping_icon();\r\n  });\r\n}\r\n\r\n// 1) 액션에서 계산 분리하기\r\nfunction gets_free_shipping(item_price, total) {\r\n  // 2) 압묵적 입력 제거\r\n  return item_price + total &gt;= 20;\r\n}\r\n\r\nfunction update_tax_dom() {\r\n  set_tax_dom(shopping_cart_total * 1.0);\r\n}</code>\n        </deckgo-highlight-code>\n<h2 id=\"변경한-코드의-문제점\" style=\"position:relative;\"><a href=\"#%EB%B3%80%EA%B2%BD%ED%95%9C-%EC%BD%94%EB%93%9C%EC%9D%98-%EB%AC%B8%EC%A0%9C%EC%A0%90\" aria-label=\"변경한 코드의 문제점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>변경한 코드의 문제점</h2>\n<ul>\n<li>gets_free_shipping()\n<ul>\n<li>인자: 장바구니가 아닌, 제품의 합계와 가격으로 무료배송을 확인하고 있음.</li>\n<li>중복: calc_total() 함수와 장바구니 합계를 계산하는 코드가 중복됨.</li>\n</ul>\n</li>\n</ul>\n<p>변경 전</p>\n<deckgo-highlight-code language=\"jsx\"  >\n          <code slot=\"code\">function update_shipping_icons() {\r\n  var buy_buttons = get_buy_buttons_dom();\r\n  buy_buttons.forEach((button) =&gt; {\r\n    var item = button.item;\r\n    if (gets_free_shipping(item.price, shopping_cart_total))\r\n      button.show_free_shipping_icon();\r\n    else button.hide_free_shipping_icon();\r\n  });\r\n}\r\n\r\nfunction gets_free_shipping(item_price, total) {\r\n  return item_price + total &gt;= 20;\r\n}</code>\n        </deckgo-highlight-code>\n<p>변경 후</p>\n<deckgo-highlight-code language=\"jsx\"  >\n          <code slot=\"code\">function update_shipping_icons() {\r\n  var buy_buttons = get_buy_buttons_dom();\r\n  buy_buttons.forEach((button) =&gt; {\r\n    var item = button.item;\r\n    var new_cart = add_item(shopping_cart, item.name, item.price);\r\n    if (gets_free_shipping(new_cart)) button.show_free_shipping_icon();\r\n    else button.hide_free_shipping_icon();\r\n  });\r\n}\r\n\r\nfunction gets_free_shipping(cart) {\r\n  // 장바구니를 인자로 받음\r\n  return calc_total(cart) &gt;= 20; // 중복되는 부분을 함수로 뺌\r\n}</code>\n        </deckgo-highlight-code>\n<ul>\n<li>압묵적 입력과 출력\n<ul>\n<li>인자가 아닌 모든 입력</li>\n<li>리턴값이 아닌 모든 출력</li>\n</ul>\n</li>\n</ul>\n<p>변경 전</p>\n<deckgo-highlight-code language=\"jsx\"  >\n          <code slot=\"code\">function update_shipping_icons() {\r\n  var buy_buttons = get_buy_buttons_dom();\r\n  buy_buttons.forEach((button) =&gt; {\r\n    var item = button.item;\r\n    // 전역변수 참조 =&gt; 압묵적 입력\r\n    var new_cart = add_item(shopping_cart, item.name, item.price);\r\n    if (gets_free_shipping(new_cart)) button.show_free_shipping_icon();\r\n    else button.hide_free_shipping_icon();\r\n  });\r\n}\r\n\r\nfunction calc_cart_total() {\r\n  shopping_cart_total = calc_total(shopping_cart);\r\n  set_cart_total_dom();\r\n  update_shipping_icons();\r\n  update_tax_dom();\r\n}</code>\n        </deckgo-highlight-code>\n<p>변경 후</p>\n<deckgo-highlight-code language=\"jsx\"  >\n          <code slot=\"code\">function update_shipping_icons(cart) {\r\n  var buy_buttons = get_buy_buttons_dom();\r\n  buy_buttons.forEach((button) =&gt; {\r\n    var item = button.item;\r\n    // 전역변수를 인자로 대체\r\n    var new_cart = add_item(cart, item.name, item.price);\r\n    if (gets_free_shipping(new_cart)) button.show_free_shipping_icon();\r\n    else button.hide_free_shipping_icon();\r\n  });\r\n}\r\n\r\nfunction calc_cart_total() {\r\n  shopping_cart_total = calc_total(shopping_cart);\r\n  set_cart_total_dom();\r\n  update_shipping_icons(shopping_cart);\r\n  update_tax_dom();\r\n}</code>\n        </deckgo-highlight-code>\n<h2 id=\"원칙-설계는-엉켜있는-코드를-푸는-것\" style=\"position:relative;\"><a href=\"#%EC%9B%90%EC%B9%99-%EC%84%A4%EA%B3%84%EB%8A%94-%EC%97%89%EC%BC%9C%EC%9E%88%EB%8A%94-%EC%BD%94%EB%93%9C%EB%A5%BC-%ED%91%B8%EB%8A%94-%EA%B2%83\" aria-label=\"원칙 설계는 엉켜있는 코드를 푸는 것 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>원칙: 설계는 엉켜있는 코드를 푸는 것.</h2>\n<ol>\n<li>재사용하기 쉽다\n<ol>\n<li>함수는 작으면 작을수록 재사용하기 쉽다.</li>\n</ol>\n</li>\n<li>유지보수하기 쉽다\n<ol>\n<li>작은 함수는 쉽게 이해할 수 있고 유지보수하기 쉽다.</li>\n</ol>\n</li>\n<li>테스트하기 쉽다\n<ol>\n<li>작은 함수는 한 가지 일만 하기 때문에 테스트하기 좋다.</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"add_item-분리하기\" style=\"position:relative;\"><a href=\"#add_item-%EB%B6%84%EB%A6%AC%ED%95%98%EA%B8%B0\" aria-label=\"add_item 분리하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>add_item() 분리하기</h2>\n<h3 id=\"1-add_item에서-item-만드는-부분-빼기\" style=\"position:relative;\"><a href=\"#1-add_item%EC%97%90%EC%84%9C-item-%EB%A7%8C%EB%93%9C%EB%8A%94-%EB%B6%80%EB%B6%84-%EB%B9%BC%EA%B8%B0\" aria-label=\"1 add_item에서 item 만드는 부분 빼기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. add_item()에서 item 만드는 부분 빼기</h3>\n<ul>\n<li>cart와 item을 독립적으로 확장할 수 있음\n<ul>\n<li>ex) cart의 자료구조가 바뀌어도 변경할 부분이 적음</li>\n</ul>\n</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">function add_item(cart, name, price) {\r\n  var new_cart = [...cart];\r\n  new_cart.push({\r\n    name,\r\n    price,\r\n  });\r\n  return new_cart;\r\n}\r\n\r\nadd_item(shopping_cart, &quot;shoes&quot;, 3.45);</code>\n        </deckgo-highlight-code>\n<deckgo-highlight-code language=\"jsx\"  >\n          <code slot=\"code\">function make_cart_item(name, price) {\r\n  return { name, price };\r\n}\r\n\r\nfunction add_item(cart, item) {\r\n  var new_cart = [...cart];\r\n  new_cart.push(item);\r\n  return new_cart;\r\n}\r\n\r\nadd_item(shopping_cart, make_cart_item(&quot;shoes&quot;, 3.45));</code>\n        </deckgo-highlight-code>\n<h3 id=\"2-copy-on-write-패턴-빼내기\" style=\"position:relative;\"><a href=\"#2-copy-on-write-%ED%8C%A8%ED%84%B4-%EB%B9%BC%EB%82%B4%EA%B8%B0\" aria-label=\"2 copy on write 패턴 빼내기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Copy-On-Write 패턴 빼내기</h3>\n<p>카피-온-라이트란?</p>\n<ul>\n<li>값을 바꿀 때, 복사하는 것</li>\n</ul>\n<deckgo-highlight-code language=\"jsx\"  >\n          <code slot=\"code\">function add_item(cart, item) {\r\n  var new_cart = [...cart]; // Copy on write\r\n  new_cart.push(item);\r\n  return new_cart;\r\n}</code>\n        </deckgo-highlight-code>\n<deckgo-highlight-code language=\"jsx\"  >\n          <code slot=\"code\">// Copy-On-Write 함수\r\n// 어떤 배열, 항복에도 쓸 수 있는 일반적인 이름\r\nfunction add_element_last(array, elem) {\r\n  var new_array = [...cart];\r\n  new_array.push(elem);\r\n  return new_array;\r\n}\r\n\r\nfunction add_item(cart, item) {\r\n  return add_element_last(cart, item);\r\n}</code>\n        </deckgo-highlight-code>\n<h2 id=\"결론\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-label=\"결론 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결론</h2>\n<ul>\n<li>암묵적 입출력을 인자와 리턴값으로 바꾸자</li>\n<li>풀려있는 코드는 언제든 합칠 수 있으므로, 엉켜있는 코드를 풀자</li>\n<li>각 함수가 하나의 일만 하도록 하면 개념을 중심으로 쉽게 구성할 수 있다.</li>\n</ul>","frontmatter":{"title":"[함수형 코딩] Chapter 4, 5","date":"2023-04-17","tags":["Functional Programming"],"type":"TECH"},"tableOfContents":"<ul>\n<li>\n<p><a href=\"#megamartcom\">MegaMart.com</a></p>\n<ul>\n<li><a href=\"#%EA%B8%B0%EC%A1%B4-%EC%BD%94%EB%93%9C\">기존 코드</a></li>\n<li><a href=\"#%EB%AC%B8%EC%A0%9C%EC%A0%90-%EC%9C%84-%EC%BD%94%EB%93%9C%EC%97%90%EB%8A%94-%EA%B3%84%EC%82%B0-%EB%8D%B0%EC%9D%B4%ED%84%B0%EA%B0%80-%EC%97%86%EA%B3%A0-%EB%AA%A8%EB%93%A0-%EC%BD%94%EB%93%9C%EA%B0%80-%EC%95%A1%EC%85%98%EC%9D%B4%EB%8B%A4\">문제점: 위 코드에는 계산, 데이터가 없고 모든 코드가 액션이다.</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%99%80-%EC%9E%AC%EC%82%AC%EC%9A%A9%EC%84%B1\">테스트와 재사용성</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%BD%94%EB%93%9C-%EB%B3%80%EA%B2%BD%ED%95%98%EA%B8%B0\">코드 변경하기</a></p>\n<ul>\n<li>\n<p><a href=\"#%EB%B3%80%EA%B2%BD%ED%95%9C-%EC%BD%94%EB%93%9C%EC%9D%98-%EB%AC%B8%EC%A0%9C%EC%A0%90\">변경한 코드의 문제점</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%9B%90%EC%B9%99-%EC%84%A4%EA%B3%84%EB%8A%94-%EC%97%89%EC%BC%9C%EC%9E%88%EB%8A%94-%EC%BD%94%EB%93%9C%EB%A5%BC-%ED%91%B8%EB%8A%94-%EA%B2%83\">원칙: 설계는 엉켜있는 코드를 푸는 것.</a></p>\n</li>\n<li>\n<p><a href=\"#add_item-%EB%B6%84%EB%A6%AC%ED%95%98%EA%B8%B0\">add_item() 분리하기</a></p>\n<ul>\n<li><a href=\"#1-add_item%EC%97%90%EC%84%9C-item-%EB%A7%8C%EB%93%9C%EB%8A%94-%EB%B6%80%EB%B6%84-%EB%B9%BC%EA%B8%B0\">1. add_item()에서 item 만드는 부분 빼기</a></li>\n<li><a href=\"#2-copy-on-write-%ED%8C%A8%ED%84%B4-%EB%B9%BC%EB%82%B4%EA%B8%B0\">2. Copy-On-Write 패턴 빼내기</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EA%B2%B0%EB%A1%A0\">결론</a></p>\n</li>\n</ul>\n</li>\n</ul>"}},"pageContext":{"slug":"/posts/TECH/함수형 코딩 Chapter 4,5/"}},"staticQueryHashes":["3649515864","63159454"]}